---
# tasks file for common
- name: install pip 
  shell: curl -sL https://bootstrap.pypa.io/pip/2.7/get-pip.py  | python -   

- name: install python package 
  shell: pip install setuptools -U  &&
         pip install pyyaml --ignore-install &&
         pip install ipaddress --ignore-install &&
         pip install kubernetes

- name: install openshift
  yum:
    name: python2-openshift.noarch
    state: present

- name: Taint and Label prometheus node 
  # when: inventory_hostname in groups['mds-node']
  shell: kubectl taint  node {{ mds_node }} {{ tolerate_key }}=:NoSchedule --overwrite &&
         kubectl label  node {{ mds_node }} {{ nodeselector_key }}={{ nodeselector_value }} --overwrite &&
         kubectl label  node {{ mds_node }} node-role.kubernetes.io/prometheus= --overwrite
  when: 
    - prometheus_stack_is_install | bool

- name: Taint and Label graylog node 
  {% for node in graylog_master_node  %}
  shell: kubectl label  node {{ node }} key=graylog-master --overwrite &&
         kubectl taint  node {{ node }} es-data=:NoSchedule --overwrite &&
         kubectl label  node {{ node }} label-key=es-data --overwrite
  {% endfor %}
  when: 
    - graylog_is_install | bool

- name: Taint and Label graylog node 
  {% for node in graylog_slave_node  %}
  shell: kubectl label  node {{ node }} key=graylog-slave --overwrite && 
         kubectl taint  node {{ node }} es-data=:NoSchedule --overwrite &&
         kubectl label  node {{ node }} label-key=es-data --overwrite
  {% endfor %}
  when: 
    - graylog_is_install | bool

- name: Create mds namespace
  k8s: 
    name: '{{ prometheus_stack_namespace }}'
    api_version: v1
    kind: Namespace
    state: present

- name: Create graylog namespace
  k8s: 
    name: '{{ graylog_namespace }}'
    api_version: v1
    kind: Namespace
    state: present
  when:
    - graylog_is_install | bool

- name: Create storageclass
  k8s: 
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: prometheus-storage
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer

- name: Create image pull secrets
  k8s:
    state: present
    definition: "{{ lookup('template', 'image.secret.yml') | from_yaml }}"
