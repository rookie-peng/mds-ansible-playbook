apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ prometheus_stack_namespace }}
  labels:
    app: grafana
    chart: grafana-4.0.2
    release: mds-mds
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      release: mds-mds
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grafana
        release: mds-mds
      annotations:
        checksum/config: 7f61f5179613a125c1346610e1b45d6e3ec081726a30277248a8eaa572ac408f
        checksum/dashboards-json-config: bb323a7ec09710a1be16b2cc02d8207b1a685ad202db5edb037fb97c64d517ae
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 27e5f86ccf70c00043221fc6fb59fd14c26f67533e4334fe79977698ff96a909
    spec:
      serviceAccountName: grafana
      securityContext:
        fsGroup: 472
        runAsUser: 472

      initContainers:
        - name: init-chown-data
          image: "busybox:1.30"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          command: ["chown", "-R", "472:472", "/var/lib/grafana"]
          resources:
            {}

          volumeMounts:
            - name: storage
              mountPath: "/var/lib/grafana"
        - name: download-dashboards
          image: "appropriate/curl:latest"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: [ "-c", "mkdir -p /var/lib/grafana/dashboards/default && /bin/sh /etc/grafana/download_dashboards.sh" ]
          env:
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/download_dashboards.sh"
              subPath: download_dashboards.sh
            - name: storage
              mountPath: "/var/lib/grafana"
      tolerations:
        - key: {{ grafana_tolerate_key }}
          operator: Exists
      containers:
        - name: grafana
          image: {{ grafana_image }}
          imagePullPolicy: IfNotPresent

          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: datasources.yaml
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: dashboardproviders.yaml
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-password
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30

          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000

          resources:
            limits:
              cpu: 40m
              memory: 200Mi
            requests:
              cpu: 20m
              memory: 100Mi
      nodeSelector:
        {{ prometheus_nodeselector_key }}: {{ prometheus_nodeselector_value }}

      volumes:
        - name: config
          configMap:
            name: grafana
        - name: dashboards-default
          configMap:
            name: grafana-dashboards-default
        - name: storage
          persistentVolumeClaim:
            claimName: grafana

